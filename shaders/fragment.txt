#version 330 core

struct PointLight {
    vec3 position;
    vec3 color;
    float strength;
};

in vec2 fragmentTexCoord;
in vec3 fragmentPosition;
in vec3 fragmentNormal;
in vec4 fragmentLightSpace;

uniform sampler2D imageTexture;
uniform sampler2D shadowMap;
uniform PointLight Lights[8];
uniform vec3 cameraPosition;
uniform bool useTexture;
uniform vec3 tint;
uniform bool shadowsEnabled;

out vec4 color;

// ---------------------- Shadow Calculation ----------------------

float calculateShadow(vec4 lightSpacePos)
{
    // Convert from NDC to [0,1] coordinates
    vec3 projCoords = lightSpacePos.xyz / lightSpacePos.w;
    projCoords = projCoords * 0.5 + 0.5;

    // Skip fragments outside light frustum
    if (projCoords.z > 1.0)
        return 1.0;

    // Read depth from shadow map
    float closestDepth = texture(shadowMap, projCoords.xy).r;
    float currentDepth = projCoords.z;

    // Bias to reduce shadow acne
    float bias = max(0.05 * (1.0 - dot(fragmentNormal, normalize(Lights[0].position - fragmentPosition))), 0.001);


    // Shadow factor: 0.0 = in shadow, 1.0 = lit
    return (currentDepth - bias > closestDepth) ? 0.0 : 1.0;
}

// ---------------------- Lighting Model ----------------------

vec3 calculatePointLight(PointLight light, vec3 fragPosition, vec3 fragNormal, vec3 baseColor)
{
    vec3 result = vec3(0.0);

    vec3 fragToLight = light.position - fragPosition;
    float distance = length(fragToLight);
    fragToLight = normalize(fragToLight);

    vec3 fragToCamera = normalize(cameraPosition - fragPosition);
    vec3 halfVec = normalize(fragToLight + fragToCamera);

    // Diffuse
    float diff = max(dot(fragNormal, fragToLight), 0.0);
    result += light.color * light.strength * diff * baseColor / (distance * distance);

    // Specular
    float spec = pow(max(dot(fragNormal, halfVec), 0.0), 32.0);
    result += light.color * light.strength * spec / (distance * distance);

    return result;
}

// ---------------------- Main ----------------------

void main()
{
    // Base color
    vec3 baseColor = useTexture 
        ? texture(imageTexture, fragmentTexCoord).rgb 
        : tint;

    // Compute shadow factor
    float shadow = shadowsEnabled ? calculateShadow(fragmentLightSpace) : 1.0;

    // Ambient + Lighting
    vec3 temp = 0.2 * baseColor;
    for (int i = 0; i < 8; ++i) {
        temp += shadow * calculatePointLight(Lights[i], fragmentPosition, fragmentNormal, baseColor);
    }

    float alpha = useTexture 
        ? texture(imageTexture, fragmentTexCoord).a 
        : 1.0;

    color = vec4(temp, alpha);
    if (!shadowsEnabled) {
        color = vec4(1.0, 0.0, 0.0, 1.0);
        return;
    }
}
